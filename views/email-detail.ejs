<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= email.subject %> - Outlook Email Assistant</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h2">Email Details</h1>
      <div>
        <a href="/emails" class="btn btn-outline-secondary me-2">Back to Emails</a>
        <a href="/status" class="btn btn-outline-info me-2">System Status</a>
        <a href="/" class="btn btn-outline-secondary me-2">Home</a>
        <a href="/auth/logout" class="btn btn-outline-secondary">Sign Out</a>
      </div>
    </div>
    
    <div class="card mb-4">
      <div class="card-header">
        <h5 class="card-title mb-0"><%= email.subject %></h5>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <div><strong>From:</strong> <%= email.from.emailAddress.name %> (<%= email.from.emailAddress.address %>)</div>
          <div><strong>To:</strong> 
            <% email.toRecipients.forEach((recipient, index) => { %>
              <%= recipient.emailAddress.name %> (<%= recipient.emailAddress.address %>)
              <%= index < email.toRecipients.length - 1 ? '; ' : '' %>
            <% }); %>
          </div>
          <% if (email.ccRecipients && email.ccRecipients.length > 0) { %>
            <div><strong>CC:</strong> 
              <% email.ccRecipients.forEach((recipient, index) => { %>
                <%= recipient.emailAddress.name %> (<%= recipient.emailAddress.address %>)
                <%= index < email.ccRecipients.length - 1 ? '; ' : '' %>
              <% }); %>
            </div>
          <% } %>
          <div><strong>Received:</strong> <%= new Date(email.receivedDateTime).toLocaleString() %></div>
          <% if (email.hasAttachments) { %>
            <div class="mt-1"><i class="bi bi-paperclip"></i> This email has attachments</div>
          <% } %>
        </div>
        
        <hr>
        
        <div class="email-body mb-4">
          <%- email.body.content %>
        </div>
        
        <button id="generateDraftBtn" class="btn btn-primary">Generate Draft Response</button>
        <button id="markReadBtn" class="btn btn-outline-secondary ms-2">Mark as Read</button>
      </div>
    </div>
    
    <% if (events.length > 0) { %>
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="card-title mb-0">Your Calendar for Next 5 Days</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Event</th>
                  <th>Start</th>
                  <th>End</th>
                  <th>Location</th>
                </tr>
              </thead>
              <tbody>
                <% events.forEach(event => { %>
                  <tr>
                    <td><%= event.subject %></td>
                    <td><%= event.start %></td>
                    <td><%= event.end %></td>
                    <td><%= event.location %></td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    <% } else { %>
      <div class="card mb-4">
        <div class="card-body">
          <p class="mb-0">No upcoming events in your calendar for the next 5 days.</p>
        </div>
      </div>
    <% } %>
    
    <div id="draftResponse" class="card d-none">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">Draft Response</h5>
        <span class="badge bg-success">
          <i class="bi bi-cpu"></i> Generated with <%= process.env.OLLAMA_MODEL || 'Ollama' %>
        </span>
      </div>
      <div class="card-body">
        <div id="draftContent" class="mb-3"></div>
        <div class="alert alert-success">
          <i class="bi bi-check-circle-fill"></i> Draft has been created in your Outlook account.
        </div>
        <div class="mt-3">
          <button id="regenerateDraftBtn" class="btn btn-outline-primary btn-sm">
            <i class="bi bi-arrow-repeat"></i> Regenerate Response
          </button>
        </div>
      </div>
    </div>
    
    <div id="draftError" class="card d-none mb-4">
      <div class="card-header bg-warning">
        <h5 class="card-title mb-0">Generation Error</h5>
      </div>
      <div class="card-body">
        <div class="alert alert-warning">
          <i class="bi bi-exclamation-triangle-fill"></i>
          <span id="errorMessage">There was an error generating the draft response.</span>
        </div>
        <button id="retryButton" class="btn btn-outline-primary">
          <i class="bi bi-arrow-repeat"></i> Retry
        </button>
        <a href="/status" class="btn btn-outline-secondary">
          <i class="bi bi-wrench"></i> Check System Status
        </a>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Handle generating draft response
      document.getElementById('generateDraftBtn').addEventListener('click', generateDraft);
      
      // Handle regenerating draft response
      const regenerateBtn = document.getElementById('regenerateDraftBtn');
      if (regenerateBtn) {
        regenerateBtn.addEventListener('click', generateDraft);
      }
      
      // Handle retry button
      const retryButton = document.getElementById('retryButton');
      if (retryButton) {
        retryButton.addEventListener('click', generateDraft);
      }
      
      // Handle marking email as read
      document.getElementById('markReadBtn').addEventListener('click', markEmailAsRead);
    });
    
    async function generateDraft() {
      try {
        const generateBtn = document.getElementById('generateDraftBtn');
        generateBtn.disabled = true;
        generateBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
        
        // Hide any previous error message
        document.getElementById('draftError').classList.add('d-none');
        
        const response = await fetch('/emails/<%= email.id %>/draft', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show the draft response
          document.getElementById('draftContent').innerHTML = result.draft.replace(/\n/g, '<br>');
          document.getElementById('draftResponse').classList.remove('d-none');
          
          // Scroll to the draft
          document.getElementById('draftResponse').scrollIntoView({ behavior: 'smooth' });
        } else {
          // Show error message
          document.getElementById('errorMessage').textContent = result.error || 'Error generating draft response';
          document.getElementById('draftError').classList.remove('d-none');
          document.getElementById('draftError').scrollIntoView({ behavior: 'smooth' });
        }
      } catch (error) {
        console.error('Error generating draft:', error);
        // Show error message
        document.getElementById('errorMessage').textContent = 'Network error while generating response';
        document.getElementById('draftError').classList.remove('d-none');
        document.getElementById('draftError').scrollIntoView({ behavior: 'smooth' });
      } finally {
        const generateBtn = document.getElementById('generateDraftBtn');
        generateBtn.disabled = false;
        generateBtn.innerHTML = 'Generate Draft Response';
      }
    }
    
    async function markEmailAsRead() {
      try {
        const markReadBtn = document.getElementById('markReadBtn');
        markReadBtn.disabled = true;
        markReadBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Marking as read...';
        
        const response = await fetch('/emails/<%= email.id %>/markRead', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          // Redirect back to emails list
          window.location.href = '/emails';
        } else {
          alert('Error marking email as read');
          markReadBtn.disabled = false;
          markReadBtn.innerHTML = 'Mark as Read';
        }
      } catch (error) {
        console.error('Error marking email as read:', error);
        alert('An error occurred while marking the email as read.');
        markReadBtn.disabled = false;
        markReadBtn.innerHTML = 'Mark as Read';
      }
    }
  </script>
</body>
</html>